[mcu kms_mcu_1]
canbus_uuid: 35537efca352

[temperature_sensor kms_mcu_1]
sensor_type: temperature_mcu
sensor_mcu: kms_mcu_1

[manual_extruder_stepper kms_mmu_1_T0]
step_pin: kms_mcu_1:PB6
dir_pin: !kms_mcu_1:PB7
enable_pin: !kms_mcu_1:PB5
#rotation_distance: 22.6789511
#rotation_distance: 46.4918498	
rotation_distance: 45.5620128		
#gear_ratio: 50:8
microsteps: 16  
full_steps_per_rotation: 200 #200 for 1.8 degree, 400 for 0.9 degree
velocity: 35
accel: 150
#Right now no pin is used for the endstop, but we need to define one for klipper. So just use a random, not used pin
#endstop_pin: P0.10

[tmc2209 manual_extruder_stepper kms_mmu_1_T0]
uart_pin: kms_mcu_1:PA9
##diag_pin: kms_mcu_1:PB8
interpolate: True
run_current: 0.40
hold_current: 0.1
sense_resistor: 0.110
stealthchop_threshold: 500 

[manual_extruder_stepper kms_mmu_1_T1]
step_pin: kms_mcu_1:PD0
dir_pin: !kms_mcu_1:PD3
enable_pin: !kms_mcu_1:PA15
#rotation_distance: 22.6789511
#rotation_distance: 46.4918498	
rotation_distance: 45.5620128
#gear_ratio: 50:8	
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
velocity: 35
accel: 150
#Right now no pin is used for the endstop, but we need to define one for klipper. So just use a random, not used pin
#endstop_pin: P0.10

[tmc2209 manual_extruder_stepper kms_mmu_1_T1]
uart_pin: kms_mcu_1:PC6
##diag_pin: kms_mcu_1:PB9
interpolate: True
run_current: 0.40
hold_current: 0.1
sense_resistor: 0.110
stealthchop_threshold: 500 

[mmu_servo kms_servo_T0]
pin: kms_mcu_1:PA0
maximum_servo_angle: 180
minimum_pulse_width: 0.00085
maximum_pulse_width: 0.00215

[mmu_servo kms_servo_T1]
pin: rpi_pico:gpio28
maximum_servo_angle: 180
minimum_pulse_width: 0.00085
maximum_pulse_width: 0.00215

[output_pin kms_rewing_T0]
pin: rpi_pico:gpio22
value: 0
shutdown_value: 0

[output_pin kms_rewing_T1]
pin: rpi_pico:gpio27
value: 0
shutdown_value: 0

[filament_switch_sensor kms_switch_sensor_splitter_1]
switch_pin: kms_mcu_1:PB2
pause_on_runout: False
# runout_gcode:
#     _kms_dummy_macro
# insert_gcode:
#     _kms_dummy_macro

[filament_switch_sensor kms_switch_sensor_T0]
switch_pin: kms_mcu_1:PA4
pause_on_runout: False
event_delay: 2.0
insert_gcode:
    _kms_filament_sensor_insert_tool tool=T0

[filament_switch_sensor kms_switch_sensor_T1]
switch_pin: kms_mcu_1:PA3
pause_on_runout: False
event_delay: 2.0
insert_gcode:
    _kms_filament_sensor_insert_tool tool=T1

[neopixel _kms_leds]
pin: rpi_pico:gpio18
chain_count: 4
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0

[gcode_button my_gcode_button]
pin: rpi_pico:gpio16
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
press_gcode:
  _kms_servo_down tool=T1
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
release_gcode:
  _kms_servo_up tool=T1
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.
